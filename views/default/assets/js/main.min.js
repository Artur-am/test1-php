(function (e) {
    e.closest = e.closest || function (css) {
        var node = this;

        while (node) {
            if (node.matches(css)) return node;
            else node = node.parentElement;
        }
        return null;
    }
})(Element.prototype);


function User()
{
    if( !(this instanceof User) )
    {
        return new User();
    }

    this.create = () => {

    }

    this.edit = () => {

    }

    this.remove = () => {

    }
}

// let user = new User();

// user.edit();
function Ajax(args)
{
    args.data.token = window.token;

    let url = window.location.href;
    if('url' in args)
    {
        url += args.url+'/';
    }
    let d = '';

    for(let item in args.data)
    {
        d += item+'='+args.data[item]+'&';
    }
    d = d.slice(0, -1);

    if('post'==args.method.toLowerCase())
    {
        if(!('header' in args))
        {
            args.header = [];
        }

        if(!('Content-type' in args.header))
        {
            args.header['Content-type'] = "application/x-www-form-urlencoded; charset=UTF-8";
        }
    }
    else{
        url += d;
        d = null;
    }

    const req = new XMLHttpRequest();

    req.onreadystatechange = function(){

        if(req.readyState == 4)
        {
            if(req.status == 200)
            {
                console.log(req.responseText);
                const data = (function( data ) {
                    try {
                        return JSON.parse( data );
                    } catch (err) {
                        return {success: false};
                    }
                })(req.responseText);

                if(true===data.success)
                {
                    args.success(data);
                }
                
            }
        }
    }

    req.open(args.method, url, true);

    if(Array.isArray(args.header))
    {
        for(let head in args.header)
        {
            console.log(head, args.header[head]);
            req.setRequestHeader(head, args.header[head]);
        }    
    }
    req.send(d);
}
(function(inputs){ if(!inputs) return null;

    function onChange(ev)
    {
        let el = this;
        let parent = el.closest('tr[data-id]');

        if(
            (0>=parent.length) ||
            !('id' in parent.dataset)
        ){
            return console.warn('1');
        }

        let user_id = +parent.dataset.id;
        let name = el.name.toString();
        let value = el.value.toString();
        let _is = {'group_id': true,'age': true, 'floor': true, 'faculty_id': true};

        if((false===Number.isInteger(user_id))){return console.error('');}

        if(!(name in _is))
        {
            if(
                (2>=name.length) ||
                (2>=value.length)
            )
            {
                return console.warn('2.1');
            }
        }
        else{
            if(el.type.indexOf('checkbox')!=-1)
            {
                value = +el.checked;
            }
        }
        Ajax({
            method: 'POST',
            url: 'main/update',
            data: {
                'name': name,
                'value': value,
                'id': user_id
            },
            success: function(data){
                console.log('data', data);
            }
        });
    }

    function onBlur(ev)
    {
        console.log('onBlur', this);
        
    }

    for(let input of inputs)
    {
        input.addEventListener('change', onChange);
    }

}(document.getElementsByClassName('td-input')));

(function(lists){ if(!lists) return null;

    function onClick(ev)
    {
        let el = this.parentElement;
        let parent = el.closest('tbody');
        let input = el.querySelector('input');
        let select = el.querySelector('select');

        if(!input||!parent) return console.warn('');

        let selected = parent.querySelector('.td-input:enabled');
        let selected2 = parent.querySelector('.ts-select:enabled');
        if(selected)
        {
            selected.disabled = true;
        }
        if(selected2)
        {
            selected2.disabled = true;
        }
    
        input.disabled = false;
        if(select)
        {
            select.disabled = false;
        }
    }

    for(let list of lists)
    {
        list.addEventListener('click', onClick);
    }

}(document.querySelectorAll('.js-edit')));


(function(selects){ if(!selects) return null;

    function onChange(ev)
    {
        let el = this;
        let parent = el.parentElement;
        let input = parent.querySelector('input');
        input.value = el.value;
        let event = new MouseEvent("change",{bubbles: true});
        input.dispatchEvent(event);
    }

    for(let select of selects)
    {
        select.addEventListener('change', onChange);
    }

}(document.querySelectorAll('.ts-select')));

(function(inputs){ if(!inputs) return null;

    function onChange(ev)
    {
        let el = this;
        // let event = new MouseEvent("change",{bubbles: true});
        // console.log(el.value);
        // el.dispatchEvent(event);
    }

    for(let input of inputs)
    {
        // input.addEventListener('change', onChange);
    }

}(document.querySelectorAll('.custom-checkbox')));
(function(form){ if(!form) return null;

    function ClickedCreateForm(ev)
    {
        ev.preventDefault();
        
        let el = this;
        let table = el.closest('table');
        if(!table) return console.warn();

        let el_clone = table.getElementsByClassName('clone-element')[0];
        let el_clone_node = el_clone.cloneNode(true);
        el_clone_node.classList.remove('clone-element');
        
        for(let item of [...el_clone_node.querySelectorAll('[data-form]')])
        {
            item.setAttribute('form', item.dataset.form);
            item.removeAttribute('data-form');
        }

        el_clone.insertAdjacentHTML('beforebegin', el_clone_node.outerHTML);
        document.getElementsByClassName('btn-add')[0].classList.remove('close');

        el.disabled = true;
    }

    document.getElementsByClassName('btn-create')[0].addEventListener('click', ClickedCreateForm);
    
}(document.forms.create));
(function(form){ if(!form) return null;

    function onChange(ev)
    {
        let _is = true;
        for(let input of Array.from(form.elements.remove_id))
        {
            if(true === input.checked)
            {
                _is = false;
                continue;
            }
        }
        if(_is)
        {
            form.elements.remove.classList.add('close');
            return null;
        }

        form.elements.remove.classList.remove('close');
    }

    function onSubmit(ev)
    {
        ev.preventDefault();

        let remove_id = [];

        for(let input of Array.from(form.elements.remove_id))
        {
            if(true === input.checked)
            {
                remove_id.push(input.value);
            }
        }
        if(0>=remove_id.length)
        {
            return console.warn(1);
        }

        Ajax({
            method: 'POST',
            url: 'main/remove',
            data: {
                'id': remove_id
            },
            success: function(data){
                window.location = window.location;
            }
        });
    }

    for(let input of Array.from(form.elements.remove_id))
    {
        input.addEventListener('change', onChange);
    }
    form.addEventListener('submit', onSubmit);
}(document.forms.remove));
(function(form){ if(!form) return null;

    function onSubmit(ev)
    {
        ev.preventDefault();

        let el = this;
        let elements = el.elements;

        let data = {
            firstName: elements.firstName.value.toString(),
            lastName: elements.lastName.value.toString(),
            age: +elements.age.value,
            floor: +elements.floor.checked,
            group: +elements['select-group'].value,
            faculty: +elements['select-faculty'].value
        };
        let hash_error = (el, status)=>{
            el.style.boxShadow = (true===status) ? 'inset 0 0 4px red' : null;
        }

        hash_error(elements.firstName, 3>=data.firstName.length);
        hash_error(elements.lastName, 3>=data.lastName.length);
        hash_error(elements.age, (isNaN(data.age)||!data.age));
        hash_error(elements.floor, isNaN(data.floor));
        hash_error(elements['select-group'], isNaN(data.group));
        hash_error(elements['select-faculty'], isNaN(data.faculty));

        Ajax({
            method: 'POST',
            url: 'main/create',
            data: data,
            success: function(data){
                window.location = window.location;
            }
        });
    }

    form.addEventListener('submit', onSubmit);
}(document.forms.create));